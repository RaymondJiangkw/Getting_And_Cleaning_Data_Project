help
h
help
help
beads <- rep(c("red","blue"),times = c(2,3))
beads
sample(beads,1)
B <- 10000
events <= replicate(B,sample(beads,1))
events <- replicate(B,sample(beads,1))
tab <- table(events)
tab
prop.table(tab)
sample(beads,5)
sample(beads,5)
sample(beads,5)
sample(beads,6)
events <- sample(beads,B,replace = True)
events <- sample(beads,B,replace = true)
events <- sample(beads,B,replace = TRUE)
prop.table(table(events))
events
x <- sample(beads,5)
x[2:5]
print x
print()
print(x)
number <- "13"
color <- "red"
paste(number,color)
paste(letters[1:5],as.character(1:5))
expand.grid(pants = c("blue","black"),shirt = c("white","grey","plaid"))
suits <- c("Diamonds","Clubs","Hearts","Spades")
numbers <- c("Ace","Deuce","Three","Four","Five","Six","Seven","Eight","Nine","Ten","Jack","Queen","King")
deck <- expand.grid(number = numbers,suit = suits)
deck <- paste(deck$number,deck$suit)
kings <- paste("King",suits)
mean(deck %in% kings)
deck
library(gtools)
permutations(5,2)
utils:::menuInstallPkgs()
utils:::menuInstallPkgs()
q()
utils:::menuInstallPkgs()
library(gtools)
q()
install.packages("RMySQL")
a
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
library(httr)
install.packages("httr")
library(httr)
html2 = GET(url)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "75ffc4989df8001de43a",
secret = "389877827ca7031f4586a37206816ec5152088dc")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github",
key = "44b2e981ce1ad814abbf",
secret = "2fdbe9c86027357373f61cd8b930ed2dde39e20d")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
library(httpuv)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos",config(token=github_token))
stop_for_status(req)
output <- content(req)
output
myapp <- oauth_app("github",
key = "44b2e981ce1ad814abbf",
secret = "2fdbe9c86027357373f61cd8b930ed2dde39e20d")
github_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
myapp <- oauth_app("github",
key = "75ffc4989df8001de43a",
secret = "389877827ca7031f4586a37206816ec5152088dc")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
output <- content(req)
output
myapp <- oauth_app("github",
key = "44b2e981ce1ad814abbf",
secret = "2fdbe9c86027357373f61cd8b930ed2dde39e20d")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
library(sqldf)
install.packages("sqldf")
library(sqldf)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl,destfile = "acs.csv")
acs <- read.csv("acs.csv")
head(acs)
detach("package:RMySQL",unload=TRUE)
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select * from acs where AGEP < 50 and pwgtp1")
Z <- unique(acs$AGEP)
A <- sqldf("select distinct AGEP from acs")
identical(Z,A$AGEP)
htmlUrl <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines(htmlUrl)
close(htmlUrl)
head(htmlCode)
c(nchar(htmlCode[10]),nchar(htmlCode[20]),nchar(htmlCode[30]),nchar(htmlCode[100]))
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
SST <- read.fwf(fileUrl,skip = 4,widths = c(12,7,4,9,4,9,4,9,4))
head(SST)
sum(SST[,4])
install.packages("jpeg")
library(jpeg)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg","jeff.jpg")
picture <- jpeg::readJPEG("jeff.jpg",native = TRUE)
help(quantile)
quantile(picture,probs = c(0.3,0.8))
quantile(picture,probs = c(0.3,0.8))
library("data.table")
install.packages("data.table")
FGDP <- data.table::fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
, skip=4
, nrows = 190
, select = c(1, 2, 4, 5)
, col.names=c("CountryCode", "Rank", "Economy", "Total")
)
FGDP <- data.table::fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
, skip=4
, nrows = 190
, select = c(1, 2, 4, 5)
, col.names=c("CountryCode", "Rank", "Economy", "Total")
)
FEDSTATS_Country <- data.table::fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv'
)
FEDSTATS_Country <- data.table::fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv'
)
FEDSTATS_Country
mergedDT <- merge(FGDP,FEDSTATS_Country, by = 'CountryCode')
nrow(mergedDT)
mergedDT[order(-Rank)][13,.(Economy)]
mergedDT['Income Group' == 'High income: OECD',lapply(.SD,mean),.SDcols = c('Rank'),by  'Income Group']
mergedDT['Income Group' == 'High income: OECD',lapply(.SD,mean),.SDcols = c('Rank'),by='Income Group']
install.packages("dplyr")
k
k
setwd("F:/R_Coursera")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv","data.csv")
data = read.csv('data.csv')
grepl("wgtp",data)
names(data)
grepl("wgtp",names(data))
help(strsplit)
strsplit(names(data),"wgtp")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv","data2.csv")
data = read.csv("data2.csv")
names(data2)
names(data)
data
GDP = data$Gross.domestic.product.2012
type(GDP)
typeof(GDP)
GDP
data
data$X.3
GDP = data$X.3
GDP
GDP[grepl(GDP,',')]
sub(',','',GDP)
sub(",","",GDP)
help(sub)
sub("*,*","",GDP)
GDP[1]
GDP[2]
GDP[[2]]
GDP[3
]
GDP[4]
GDP[5]
GDP[5:235]
GDP[5:236]
GDP[5:237]
GDP[5:238]
GDP <- data.table::fread("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv",skip = 5,nrows=190,select = c(1,2,4,5),col.names = c(""CountryCode", "Rank", "Country", "GDP""))
GDP <- data.table::fread("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv",skip = 5,nrows=190,select = c(1,2,4,5),col.names = c(""CountryCode", "Rank", "Country", "GDP""))
GDPrank <- data.table::fread('http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
, skip=5
, nrows=190
, select = c(1, 2, 4, 5)
, col.names=c("CountryCode", "Rank", "Country", "GDP")
)
GDPrank
GDPrank[,mean(as.integer(gsub(pattern = ',',replacement='',x =GDP)))]
GDPrank <- data.table::fread('http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
, skip=5
, nrows=190
, select = c(1, 2, 4, 5)
, col.names=c("CountryCode", "Rank", "Country", "GDP")
)
eduDT <- data.table::fread('http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv')
mergedDT <- merge(GDPRank,eduDT,by='CountryCode')
mergedDT <- merge(GDPrank,eduDT,by='CountryCode')
mergedDT[grepl(pattern = "Fiscal year end: June 30;",mergedDT[, `Special Notes`]),.N]
install.packages(quantmod)
library(quantmod)
install.packages("quantmod")
library("quantmod")
amzn <- getSymbols("AMZN",auto.assign = FALSE)
amzn <- getSymbols("AMZN",auto.assign = FALSE)
install.packages("reshape2")
file.path("./src/UCI HAR Dataset/",'features.txt')
file.path(".//src/UCI HAR Dataset/",'features.txt')
path = ".//src//UCI HAR Dataset//"
setwd("F:/R_Coursera/Getting_And_Cleaning_Data_Project")
Features_Label = read.table(file.path(path,"features.txt"))
Features_Label
Features_Label = read.table(file.path(path,"features.txt"),col.names = c("classLabels","activityName"))
Features_Label = read.table(file.path(path,"features.txt"),col.names = c("index","featureNames"))
Features = grep("(mean|std)\\(\\)",Features_Label$featureNames)
Features
measurements <- Features_Label[Features_Selected,featureNames]
measurements <- Features_Label[Features_Selected,]$featureNames
Features_Label = read.table(file.path(path,"features.txt"),col.names = c("index","featureNames"))
Activity_Label = read.table(file.path(path,"activity_labels.txt"),col.names = c("classLabels","activityName"))
# Extract only the measurements on the mean and standard deviation for each measurement.
Features_Selected = grep("(mean|std)\\(\\)",Features_Label$featureNames)
measurements <- Features_Label[Features_Selected,featureNames]
measurements <- Features_Label[Features_Selected,]
measurements <- Features_Label[Features_Selected,]$featureNames
measurements
train <- read.table(file.path(path,"train//X_train.txt"))[,Features_Selected]
train
data.table::setnames(train,colnames(train),measurements)
data.table::setnames(train,colnames(train),measurements)
train
colnames(train)
measurements
data.table::setnames(train,colnames(train),measurements)
measurements <- gsub('[()]','',measurements)
measurements
length(train)
length(measurements)
typeof(train)
colnames(train)
colnames(train) <- measurements
train
colnames(train)
trainActivities <- read.table(file.path(path,"train//Y_train.txt"),col.names = c("Activity"))
trainSubjects <- read.table(file.path(path,"train//subject_train.txt"),col.names = c("SubjectNum"))
train <- cbind(trainSubjects,trainActivities,train)
train
test <- read.table(file.path(path,"test//X_test.txt"))[,Features_Selected]
colnames(test) <- measurements
testActivities <- read.table(file.path(path,"test//Y_train.txt"),col.names = c('Activity'))
testSubjects <- read.table(file.path(path,"test//subject_train.txt"),col.names = c('SubjectNum'))
test <- cbind(testSubjects,testActivities,test)
path
path = ".//src//UCI HAR Dataset/"
test <- read.table(file.path(path,"test//X_test.txt"))[,Features_Selected]
colnames(test) <- measurements
testActivities <- read.table(file.path(path,"test//Y_train.txt"),col.names = c('Activity'))
testSubjects <- read.table(file.path(path,"test//subject_train.txt"),col.names = c('SubjectNum'))
test <- cbind(testSubjects,testActivities,test)
test <- read.table(file.path(path,"test//X_test.txt"))[,Features_Selected]
colnames(test) <- measurements
testActivities <- read.table(file.path(path,"test//Y_test.txt"),col.names = c('Activity'))
testSubjects <- read.table(file.path(path,"test//subject_test.txt"),col.names = c('SubjectNum'))
test <- cbind(testSubjects,testActivities,test)
test <- read.table(file.path(path,"test//X_test.txt"))[,Features_Selected]
colnames(test) <- measurements
testActivities <- read.table(file.path(path,"test//Y_test.txt"),col.names = c('Activity'))
testSubjects <- read.table(file.path(path,"test//subject_test.txt"),col.names = c('SubjectNum'))
test <- cbind(testSubjects,testActivities,test)
mergedDT = rbind(train,test)
mergedDT
colnames(mergedDT)
library(reshape2)
install.packages("stringi")
install.packages("reshape2")
install.packages("reshape2")
library(reshape2)
install.packages("stringi")
library(reshape2)
mergedDT
tidyDT = melt(mergedDT,id = c("Subject","Activity"),measure.vars = setdiff(colnames(mergedDT),colNames)) %>% dcast(Subject + Activity~variable,mean)
library(dplyr)
tidyDT = melt(mergedDT,id = c("Subject","Activity"),measure.vars = setdiff(colnames(mergedDT),colNames)) %>% dcast(Subject + Activity~variable,mean)
colNames <- c("Subject","Activity")
tidyDT = melt(mergedDT,id = colNames,measure.vars = setdiff(colnames(mergedDT),colNames)) %>% dcast(Subject + Activity~variable,mean)
path = ".//src//UCI HAR Dataset/"
Features_Label <- read.table(file.path(path,"features.txt"),col.names = c("index","featureNames"))
Activity_Label <- read.table(file.path(path,"activity_labels.txt"),col.names = c("classLabels","activityName"))
# Extract only the measurements on the mean and standard deviation for each measurement.
Features_Selected <- grep("(mean|std)\\(\\)",Features_Label$featureNames)
measurements <- Features_Label[Features_Selected,]$featureNames
measurements <- gsub('[()]','',measurements)
# Load Training Datasets
train <- read.table(file.path(path,"train//X_train.txt"))[,Features_Selected]
colnames(train) <- measurements
trainActivities <- read.table(file.path(path,"train//Y_train.txt"),col.names = c("Activity"))
trainSubjects <- read.table(file.path(path,"train//subject_train.txt"),col.names = c("Subject"))
train <- cbind(trainSubjects,trainActivities,train)
# Load Test Datasets
test <- read.table(file.path(path,"test//X_test.txt"))[,Features_Selected]
colnames(test) <- measurements
testActivities <- read.table(file.path(path,"test//Y_test.txt"),col.names = c('Activity'))
testSubjects <- read.table(file.path(path,"test//subject_test.txt"),col.names = c('Subject'))
test <- cbind(testSubjects,testActivities,test)
# Merge
mergedDT = rbind(train,test)
colNames <- c("Subject","Activity")
tidyDT = melt(data = mergedDT,id = colNames,measure.vars = setdiff(colnames(mergedDT),colNames)) %>% dcast(Subject + Activity~variable,mean)
tidyDT
nrows(tidyDT)
nrow(tidyDT)
ncol(tidyDT)
rownames(tidyDT)
colnames(tidyDT)
write.table(tidyDT, file.path(path,"tidyData.txt"),sep = ",",row.names = FALSE)
tidyDT[1]
tidyDT[1,]
colname(tidyDT)
colnames(tidyDT)
